{"version":3,"sources":["containers/users/user/views/detailView/about/about.js","containers/users/user/views/detailView/about/education.js","containers/users/user/views/detailView/about/experience.js","containers/users/user/views/detailView/about/insurance.js","containers/users/user/views/detailView/about/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["EditForm","props","useState","errorMessage","setErrorMessage","description","state","setState","e","a","target","name","value","preventDefault","fetch","user","username","method","credentials","headers","session","authToken","body","JSON","stringify","response","json","data","ok","Error","message","updateState","console","error","useEffect","prevState","handleSubmit","className","role","id","type","onChange","rows","placeholder","AboutWidget","editMode","setEditMode","isLoading","setIsLoading","fields","setFields","toggleEditMode","newFields","prevFields","initialize","title","disableEdit","icon","handleClick","DefaultDegreeItem","DegreeItem","handleDelete","degree","fromCurrentUser","Username","fromDate","Date","toDate","date","university","AddForm","today","Qualifications","length","fromMonth","getMonth","fromYear","getFullYear","toMonth","toYear","handleChange","newDegree","appendDegree","for","label","required","shortForm","startYear","endYear","EducationWidget","degrees","setDegrees","prevDegrees","map","index","DefaultJobItem","JobItem","job","company","newJob","appendJob","ExperienceWidget","jobs","setJobs","prevJobs","DefaultInsuranceItem","InsuranceItem","insurance","expiryDate","providerName","insuranceId","expiryMonth","expiryYear","newInsurance","appendInsurance","InsuranceWidget","insurances","setInsurances","prevInsurances","AboutSection","isCurrentUserPhysician","isPhysician","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"sPAOA,SAASA,EAASC,GACd,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA0BF,mBAAS,CAC/BG,YAAa,KADjB,mBAAOC,EAAP,KAAcC,EAAd,KAFqB,4CAerB,WAA4BC,GAA5B,SAAAC,EAAA,sDACIF,EAAS,2BACFD,GADC,kBAEHE,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAHlC,4CAfqB,kEAsBrB,WAA4BJ,GAA5B,iBAAAC,EAAA,6DACID,EAAEK,iBADN,kBAG+BC,MAAM,cAAD,OAAeb,EAAMc,KAAKC,UAAY,CAC9DC,OAAQ,MACRC,YAAa,cACbC,QAAS,CACL,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BlB,EAAMmB,QAAQC,YAE7CC,KAAMC,KAAKC,UAAU,CACjBnB,YAAaC,EAAMD,gBAXnC,cAGcoB,EAHd,gBAeyBA,EAASC,OAflC,UAeYC,EAfZ,OAgBaF,EAASG,GAhBtB,uBAiBkB,IAAIC,MAAMF,EAAKG,SAjBjC,QAoBY7B,EAAM8B,aACN9B,EAAM8B,YAAY,CACd1B,YAAaC,EAAMD,cAtBnC,kDA0BQ2B,QAAQC,MAAR,uDAA8DhC,EAAMc,KAAKC,SAAzE,oBACAZ,EAAgB,KAAI0B,SA3B5B,2DAtBqB,sBAqDrB,OA/CAI,qBAAU,WACN3B,GAAS,SAAA4B,GACL,OAAO,2BACAA,GADP,IAEI9B,YAAaJ,EAAMI,mBAG5B,CAACJ,EAAMI,cAyCN,cAAC,IAAD,UACI,eAAC,IAAD,CAAM+B,aAvDO,4CAuDb,UACKjC,GACG,cAAC,IAAD,CAASkC,UAAU,yBAAnB,SACI,qBAAKA,UAAU,qBAAqBC,KAAK,QAAzC,SAAkDnC,MAG1D,cAAC,IAAD,UACI,0BAAUoC,GAAG,qBAAqBC,KAAK,OAAO7B,KAAK,cAC/C0B,UAAU,eAAgBzB,MAAON,EAAMD,YAAaoC,SA/DnD,4CAgEGC,KAAK,IAAIC,YAAY,oCAGjC,cAAC,IAAD,CAASN,UAAU,yBAAnB,SACI,cAAC,IAAD,CAAYA,UAAU,oBAAtB,yBAQL,SAASO,EAAY3C,GAChC,MAAgCC,oBAAS,GAAzC,mBAAO2C,EAAP,KAAiBC,EAAjB,KACA,EAAkC5C,oBAAS,GAA3C,mBAAO6C,EAAP,KAAkBC,EAAlB,KACA,EAA4B9C,mBAAS,CACjCG,YAAa,KADjB,mBAAO4C,EAAP,KAAeC,EAAf,KAHuC,SAwCxBC,EAxCwB,8EAwCvC,WAA8B3C,GAA9B,SAAAC,EAAA,sDACID,EAAEK,iBACFiC,GAAaD,GAFjB,4CAxCuC,kEA6CvC,WAA4BO,GAA5B,SAAA3C,EAAA,sDACIyC,GAAU,SAAAG,GACN,OAAO,2BACAA,GACAD,MAGXN,GAAaD,GAPjB,4CA7CuC,sBAuDvC,OAhDAX,qBAAU,WAAM,4CACZ,8BAAAzB,EAAA,sEAEQuC,GAAa,GAFrB,SAG+BlC,MAAM,cAAD,OAAeb,EAAMc,KAAKC,UAAY,CAC9DC,OAAQ,MACRC,YAAa,cACbC,QAAS,CACT,cAAgB,UAAhB,OAA2BlB,EAAMmB,QAAQC,cAPrD,cAGcI,EAHd,gBAWyBA,EAASC,OAXlC,UAWYC,EAXZ,OAYaF,EAASG,GAZtB,uBAakB,IAAIC,MAAMF,EAAKG,SAbjC,QAgBQoB,GAAU,SAAAG,GACN,OAAO,2BACAA,GADP,IAEIhD,YAAasB,EAAKtB,iBAnBlC,kDAuBQ2B,QAAQC,MAAR,oDAA2DhC,EAAMc,KAAKC,SAAtE,oBAvBR,yBAyBQgC,GAAa,GAzBrB,8EADY,uBAAC,WAAD,wBA8BZM,KACD,CAACrD,EAAMc,KAAMd,EAAMmB,UAkBlB,eAAC,IAAD,WACI,cAAC,IAAD,CAAUmC,MAAM,WAAhB,UACMtD,EAAMuD,cAECX,EACD,cAAC,IAAD,CAAalC,KAAK,SAAS8C,KAAK,QAAQC,YAAaP,IACrD,cAAC,IAAD,CAAaxC,KAAK,OAAO8C,KAAK,OAAOC,YAAaP,OAI9D,cAAC,IAAD,UAESN,EACD,mCACI,cAAC7C,EAAD,CACIoB,QAASnB,EAAMmB,QACfL,KAAMd,EAAMc,KACZV,YAAa4C,EAAO5C,YACpB0B,YA1Ee,gDA6EvB,mCAESgB,EACD,cAAC,IAAD,CAAQA,WAAW,IACnB,mBAAGV,UAAU,OAAb,SAAqBY,EAAO5C,qB,4BCzJxD,SAASsD,EAAkB1D,GACvB,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKoC,UAAU,oCAAf,0CAQpB,SAASuB,EAAW3D,GAAO,4CACvB,WAA4BO,GAA5B,SAAAC,EAAA,sDACID,EAAEK,iBACEZ,EAAM4D,cACN5D,EAAM4D,aAAa5D,EAAM6D,OAAOvB,IAHxC,4CADuB,sBAQvB,IAAMvB,EAAWf,EAAM6D,OAAO9C,SAExB+C,EADkBC,YAAS,CAAEjD,KAAMd,EAAMmB,YACFJ,EAEvCiD,EAAW,IAAIC,KAAKjE,EAAM6D,OAAOG,UACjCE,EAAS,IAAID,KAAKjE,EAAM6D,OAAOK,QAErC,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAgB9B,UAAU,OAA1B,SACI,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKA,UAAU,oBAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKA,UAAU,iCAAf,SAAiDpC,EAAM6D,OAAOA,SAC9D,eAAC,IAAD,CAAKzB,UAAU,WAAf,UACI,cAAC,IAAD,CAAW+B,KAAMH,IADrB,MACoC,cAAC,IAAD,CAAWG,KAAMD,cAKjE,cAAC,IAAD,UACI,cAAC,IAAD,CAAK9B,UAAU,gBAAf,SAAgCpC,EAAM6D,OAAOO,kBAGrD,cAAC,IAAD,CAAKhC,UAAU,WAAf,SACK0B,GACG,cAAC,IAAD,UACI,cAAC,IAAD,CAAoBL,YArCxB,SAAD,mCAqCK,+BAWhC,SAASY,EAAQrE,GACb,IAAMsE,EAAQ,IAAIL,KAElB,EAAwChE,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,mBAAS,CACjC4D,OAASU,IAAeC,OAAUD,IAAe,GAAI,GACrDE,UAAWH,EAAMI,WAAa,EAC9BC,SAAUL,EAAMM,cAChBC,QAASP,EAAMI,WAAa,EAC5BI,OAAQR,EAAMM,cACdR,WAAY,KANhB,mBAAOpB,EAAP,KAAeC,EAAf,KAJoB,SAaL8B,EAbK,8EAapB,WAA4BxE,GAA5B,SAAAC,EAAA,sDACIyC,GAAU,SAAAG,GACN,OAAO,2BACAA,GADP,kBAEK7C,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,WAJtC,4CAboB,kEAsBpB,WAA4BJ,GAA5B,uBAAAC,EAAA,6DACID,EAAEK,iBADN,SAGcoD,EAAW,IAAIC,KAAKjB,EAAO2B,SAAU3B,EAAOyB,UAAU,GACtDP,EAAS,IAAID,KAAKjB,EAAO8B,OAAQ9B,EAAO6B,QAAQ,GAEhDG,EAAY,CACdnB,OAAQb,EAAOa,OACfG,SAAUA,EACVE,OAAQA,EACRE,WAAYpB,EAAOoB,YAV/B,SAa+BvD,MAAM,cAAD,OAAeb,EAAMc,KAAKC,SAA1B,YAA8C,CACtEC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACT,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BlB,EAAMmB,QAAQC,YAEzCC,KAAMC,KAAKC,UAAUyD,KApBjC,cAacxD,EAbd,iBAuByBA,EAASC,OAvBlC,WAuBYC,EAvBZ,OAwBaF,EAASG,GAxBtB,uBAyBkB,IAAIC,MAAMF,EAAKG,SAzBjC,QA4BY7B,EAAMiF,cACNjF,EAAMiF,aAAaD,GA7B/B,kDAgCQjD,QAAQC,MAAR,2DAAkEhC,EAAMc,KAAKC,SAA7E,oBACAZ,EAAgB,KAAI0B,SAjC5B,2DAtBoB,sBA2DpB,OACI,eAAC,IAAD,CAAMM,aA5DU,4CA4DhB,UACMa,EAAO9C,cACL,cAAC,IAAD,CAASkC,UAAU,yBAAnB,SACI,qBAAKA,UAAU,qBAAqBC,KAAK,QAAzC,SAAkDnC,MAG1D,eAAC,IAAD,WACI,cAAC,IAAD,CAAWgF,IAAI,kBAAkB9C,UAAU,WAA3C,2BACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,cAAC,IAAD,CACIE,GAAG,kBACHF,UAAU,eACV1B,KAAK,SACLyE,MAAM,SACNxE,MAAOqC,EAAOa,OACdkB,aAAcA,EACdK,UAAU,SAItB,eAAC,IAAD,WACI,cAAC,IAAD,CAAYF,IAAI,kBAAkB9C,UAAU,WAA5C,uBACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,kBACHF,UAAU,eACV1B,KAAK,YACLyE,MAAM,aACNE,WAAW,EACX1E,MAAOqC,EAAOyB,UACdM,aAAcA,EACdK,UAAU,MAGd,cAAC,IAAD,CAAWhD,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,kBACHF,UAAU,eACV1B,KAAK,WACLyE,MAAM,YACNG,UAAWhB,EAAMM,cAAc,IAC/BW,QAASjB,EAAMM,cACfjE,MAAOqC,EAAO2B,SACdI,aAAcA,EACdK,UAAU,SAIlB,eAAC,IAAD,WACI,cAAC,IAAD,CAAYF,IAAI,kBAAkB9C,UAAU,WAA5C,qBACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,kBACHF,UAAU,eACV1B,KAAK,UACLyE,MAAM,WACNE,WAAW,EACX1E,MAAOqC,EAAO6B,QACdE,aAAcA,EACdK,UAAU,MAGd,cAAC,IAAD,CAAWhD,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,kBACHF,UAAU,eACV1B,KAAK,SACLyE,MAAM,UACNG,UAAWhB,EAAMM,cAAc,IAC/BW,QAASjB,EAAMM,cACfjE,MAAOqC,EAAO8B,OACdC,aAAcA,EACdK,UAAU,SAIlB,eAAC,IAAD,WACI,cAAC,IAAD,CAAWF,IAAI,kBAAkB9C,UAAU,WAA3C,wBACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,uBAAOE,GAAG,kBAAkB5B,KAAK,aAAa6B,KAAK,OAC/CH,UAAU,eAAezB,MAAOqC,EAAOoB,WAAY5B,SAAUuC,EACzDrC,YAAY,4BAI5B,cAAC,IAAD,CAASN,UAAU,yBAAnB,SACI,cAAC,IAAD,CAAYA,UAAU,oBAAtB,sBAOD,SAASoD,EAAgBxF,GACpC,MAAgCC,oBAAS,GAAzC,mBAAO2C,EAAP,KAAiBC,EAAjB,KACA,EAAkC5C,oBAAS,GAA3C,mBAAO6C,EAAP,KAAkBC,EAAlB,KACA,EAA8B9C,mBAAS,IAAvC,mBAAOwF,EAAP,KAAgBC,EAAhB,KAH2C,SAmC5BxC,EAnC4B,8EAmC3C,WAA8B3C,GAA9B,SAAAC,EAAA,sDACID,EAAEK,iBACFiC,GAAaD,GAFjB,4CAnC2C,kEAwC3C,WAA4BoC,GAA5B,SAAAxE,EAAA,sDACIkF,GAAW,SAAAC,GACP,MAAM,GAAN,mBAAYA,GAAZ,CAAyBX,OAE7BnC,GAAY,GAJhB,4CAxC2C,sBA+C3C,OA1CAZ,qBAAU,WAAM,4CACZ,8BAAAzB,EAAA,sEAEQuC,GAAa,GAFrB,SAG+BlC,MAAM,cAAD,OAAeb,EAAMc,KAAKC,SAA1B,YAA8C,CACtEC,OAAQ,MACRC,YAAa,cACbC,QAAS,CACT,cAAgB,UAAhB,OAA2BlB,EAAMmB,QAAQC,cAPrD,cAGcI,EAHd,gBAWyBA,EAASC,OAXlC,UAWYC,EAXZ,OAYaF,EAASG,GAZtB,uBAakB,IAAIC,MAAMF,EAAKG,SAbjC,QAgBQ6D,GAAW,SAAAC,GACP,MAAM,GAAN,mBAAYA,GAAZ,YAA4BjE,OAjBxC,kDAoBQK,QAAQC,MAAR,wDAA+DhC,EAAMc,KAAKC,SAA1E,oBApBR,yBAsBQgC,GAAa,GAtBrB,8EADY,uBAAC,WAAD,wBA2BZM,KACD,CAACrD,EAAMc,KAAMd,EAAMmB,UAelB,eAAC,IAAD,WACI,cAAC,IAAD,CAAUmC,MAAM,YAAhB,UACMtD,EAAMuD,cAECX,EACD,cAAC,IAAD,CAAalC,KAAK,SAAS8C,KAAK,QAAQC,YAAaP,IACrD,cAAC,IAAD,CAAaxC,KAAK,MAAM8C,KAAK,MAAMC,YAAaP,OAI3DN,GACG,cAAC,IAAD,UACI,cAACyB,EAAD,CACIlD,QAASnB,EAAMmB,QACfL,KAAMd,EAAMc,KACZmE,aA/DuB,gDAmEnC,cAAC,IAAD,UAESnC,EACD,cAAC,IAAD,CAAQA,WAAW,IACnB,cAAC,IAAD,UACyB,IAAnB2C,EAAQjB,OACN,mCACKiB,EAAQG,KAAI,SAAC/B,EAAQgC,GAAT,OACT,cAAClC,EAAD,CAEIxC,QAASnB,EAAMmB,QACf0C,OAAQA,GAFHgC,QAMjB,cAACnC,EAAD,WCxS5B,SAASoC,EAAe9F,GACpB,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKoC,UAAU,oCAAf,2CAQpB,SAAS2D,EAAQ/F,GAAO,4CACpB,WAA4BO,GAA5B,SAAAC,EAAA,sDACID,EAAEK,iBACEZ,EAAM4D,cACN5D,EAAM4D,aAAa5D,EAAMgG,IAAI1D,IAHrC,4CADoB,sBAQpB,IAAMvB,EAAWf,EAAMgG,IAAIjF,SAErB+C,EADkBC,YAAS,CAAEjD,KAAMd,EAAMmB,YACFJ,EAEvCiD,EAAW,IAAIC,KAAKjE,EAAMgG,IAAIhC,UAC9BE,EAAS,IAAID,KAAKjE,EAAMgG,IAAI9B,QAElC,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAgB9B,UAAU,OAA1B,SACI,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKA,UAAU,oBAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKA,UAAU,iCAAf,SAAiDpC,EAAMgG,IAAI1C,QAC3D,eAAC,IAAD,CAAKlB,UAAU,WAAf,UACI,cAAC,IAAD,CAAW+B,KAAMH,IADrB,MACoC,cAAC,IAAD,CAAWG,KAAMD,cAKjE,cAAC,IAAD,UACI,cAAC,IAAD,CAAK9B,UAAU,gBAAf,SAAgCpC,EAAMgG,IAAIC,eAGlD,cAAC,IAAD,CAAK7D,UAAU,WAAf,SACK0B,GACG,cAAC,IAAD,UACI,cAAC,IAAD,CAAoBL,YArC3B,SAAD,mCAqCQ,+BAWhC,SAASY,EAAQrE,GACb,IAAMsE,EAAQ,IAAIL,KAElB,EAAwChE,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,mBAAS,CACjCqD,MAAO,GACPmB,UAAWH,EAAMI,WAAa,EAC9BC,SAAUL,EAAMM,cAChBC,QAASP,EAAMI,WAAa,EAC5BI,OAAQR,EAAMM,cACdqB,QAAS,KANb,mBAAOjD,EAAP,KAAeC,EAAf,KAJoB,SAaL8B,EAbK,8EAapB,WAA4BxE,GAA5B,SAAAC,EAAA,sDACIyC,GAAU,SAAAG,GACN,OAAO,2BACAA,GADP,kBAEK7C,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,WAJtC,4CAboB,kEAsBpB,WAA4BJ,GAA5B,uBAAAC,EAAA,6DACID,EAAEK,iBADN,SAGcoD,EAAW,IAAIC,KAAKjB,EAAO2B,SAAU3B,EAAOyB,UAAU,GACtDP,EAAS,IAAID,KAAKjB,EAAO8B,OAAQ9B,EAAO6B,QAAQ,GAEhDqB,EAAS,CACX5C,MAAON,EAAOM,MACdU,SAAUA,EACVE,OAAQA,EACR+B,QAASjD,EAAOiD,SAV5B,SAa+BpF,MAAM,cAAD,OAAeb,EAAMc,KAAKC,SAA1B,SAA2C,CACnEC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACT,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BlB,EAAMmB,QAAQC,YAEzCC,KAAMC,KAAKC,UAAU2E,KApBjC,cAac1E,EAbd,iBAuByBA,EAASC,OAvBlC,WAuBYC,EAvBZ,OAwBaF,EAASG,GAxBtB,uBAyBkB,IAAIC,MAAMF,EAAKG,SAzBjC,QA4BY7B,EAAMmG,WACNnG,EAAMmG,UAAUD,GA7B5B,kDAgCQnE,QAAQC,MAAR,4DAAmEhC,EAAMc,KAAKC,SAA9E,oBACAZ,EAAgB,KAAI0B,SAjC5B,2DAtBoB,sBA2DpB,OACI,eAAC,IAAD,CAAMM,aA5DU,4CA4DhB,UACMa,EAAO9C,cACL,cAAC,IAAD,CAASkC,UAAU,yBAAnB,SACI,qBAAKA,UAAU,qBAAqBC,KAAK,QAAzC,SAAkDnC,MAG1D,eAAC,IAAD,WACI,cAAC,IAAD,CAAWgF,IAAI,mBAAmB9C,UAAU,WAA5C,mBACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,uBAAOE,GAAG,mBAAmB5B,KAAK,QAAQ6B,KAAK,OAAOH,UAAU,eAC5DzB,MAAOqC,EAAOM,MAAOd,SAAUuC,EAAcrC,YAAY,eAIrE,eAAC,IAAD,WACI,cAAC,IAAD,CAAYwC,IAAI,mBAAmB9C,UAAU,WAA7C,uBACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,mBACHF,UAAU,eACV1B,KAAK,YACLyE,MAAM,aACNE,WAAW,EACX1E,MAAOqC,EAAOyB,UACdM,aAAcA,EACdK,UAAU,MAGd,cAAC,IAAD,CAAWhD,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,mBACHF,UAAU,eACV1B,KAAK,WACLyE,MAAM,YACNG,UAAWhB,EAAMM,cAAc,IAC/BW,QAASjB,EAAMM,cACfjE,MAAOqC,EAAO2B,SACdI,aAAcA,EACdK,UAAU,SAIlB,eAAC,IAAD,WACI,cAAC,IAAD,CAAYF,IAAI,mBAAmB9C,UAAU,WAA7C,qBACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,mBACHF,UAAU,eACV1B,KAAK,UACLyE,MAAM,WACNE,WAAW,EACX1E,MAAOqC,EAAO6B,QACdE,aAAcA,EACdK,UAAU,MAGd,cAAC,IAAD,CAAWhD,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,mBACHF,UAAU,eACV1B,KAAK,SACLyE,MAAM,UACNG,UAAWhB,EAAMM,cAAc,IAC/BW,QAASjB,EAAMM,cACfjE,MAAOqC,EAAO8B,OACdC,aAAcA,EACdK,UAAU,SAIlB,eAAC,IAAD,WACI,cAAC,IAAD,CAAWF,IAAI,mBAAmB9C,UAAU,WAA5C,qBACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,uBAAOE,GAAG,mBAAmB5B,KAAK,UAAU6B,KAAK,OAC7CH,UAAU,eAAezB,MAAOqC,EAAOiD,QAASzD,SAAUuC,EACtDrC,YAAY,yBAI5B,cAAC,IAAD,CAASN,UAAU,yBAAnB,SACI,cAAC,IAAD,CAAYA,UAAU,oBAAtB,sBAOD,SAASgE,EAAiBpG,GACrC,MAAgCC,oBAAS,GAAzC,mBAAO2C,EAAP,KAAiBC,EAAjB,KACA,EAAkC5C,oBAAS,GAA3C,mBAAO6C,EAAP,KAAkBC,EAAlB,KACA,EAAwB9C,mBAAS,IAAjC,mBAAOoG,EAAP,KAAaC,EAAb,KAH4C,SAmC7BpD,EAnC6B,8EAmC5C,WAA8B3C,GAA9B,SAAAC,EAAA,sDACID,EAAEK,iBACFiC,GAAaD,GAFjB,4CAnC4C,kEAwC5C,WAAyBsD,GAAzB,SAAA1F,EAAA,sDACI8F,GAAQ,SAAAC,GACJ,MAAM,GAAN,mBAAYA,GAAZ,CAAsBL,OAE1BrD,GAAY,GAJhB,4CAxC4C,sBA+C5C,OA1CAZ,qBAAU,WAAM,4CACZ,8BAAAzB,EAAA,sEAEQuC,GAAa,GAFrB,SAG+BlC,MAAM,cAAD,OAAeb,EAAMc,KAAKC,SAA1B,SAA2C,CACnEC,OAAQ,MACRC,YAAa,cACbC,QAAS,CACT,cAAgB,UAAhB,OAA2BlB,EAAMmB,QAAQC,cAPrD,cAGcI,EAHd,gBAWyBA,EAASC,OAXlC,UAWYC,EAXZ,OAYaF,EAASG,GAZtB,uBAakB,IAAIC,MAAMF,EAAKG,SAbjC,QAgBQyE,GAAQ,SAAAC,GACJ,MAAM,GAAN,mBAAYA,GAAZ,YAAyB7E,OAjBrC,kDAoBQK,QAAQC,MAAR,yDAAgEhC,EAAMc,KAAKC,SAA3E,oBApBR,yBAsBQgC,GAAa,GAtBrB,8EADY,uBAAC,WAAD,wBA2BZM,KACD,CAACrD,EAAMc,KAAMd,EAAMmB,UAelB,eAAC,IAAD,WACI,cAAC,IAAD,CAAUmC,MAAM,aAAhB,UACMtD,EAAMuD,cAECX,EACD,cAAC,IAAD,CAAalC,KAAK,SAAS8C,KAAK,QAAQC,YAAaP,IACrD,cAAC,IAAD,CAAaxC,KAAK,MAAM8C,KAAK,MAAMC,YAAaP,OAI3DN,GACG,cAAC,IAAD,UACI,cAAC,EAAD,CACIzB,QAASnB,EAAMmB,QACfL,KAAMd,EAAMc,KACZqF,UA/DwB,gDAmEpC,cAAC,IAAD,UAESrD,EACD,cAAC,IAAD,CAAQA,WAAW,IACnB,cAAC,IAAD,UACsB,IAAhBuD,EAAK7B,OACH,mCACK6B,EAAKT,KAAI,SAACI,EAAKH,GAAN,OACN,cAACE,EAAD,CAEI5E,QAASnB,EAAMmB,QACf6E,IAAKA,GAFAH,QAMjB,cAACC,EAAD,WClS5B,SAASU,EAAqBxG,GAC1B,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKoC,UAAU,oCAAf,0CAQpB,SAASqE,EAAczG,GAAO,4CAC1B,WAA4BO,GAA5B,SAAAC,EAAA,sDACID,EAAEK,iBACEZ,EAAM4D,cACN5D,EAAM4D,aAAa5D,EAAM0G,UAAUpE,IAH3C,4CAD0B,sBAQ1B,IAAMvB,EAAWf,EAAM0G,UAAU3F,SAE3B+C,EADkBC,YAAS,CAAEjD,KAAMd,EAAMmB,YACFJ,EAEvC4F,EAAa,IAAI1C,KAAKjE,EAAM0G,UAAUC,YAE5C,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAgBvE,UAAU,OAA1B,SACI,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKA,UAAU,oBAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKA,UAAU,iCAAf,SAAiDpC,EAAM0G,UAAUE,eACjE,cAAC,IAAD,CAAKxE,UAAU,WAAf,SACI,cAAC,IAAD,CAAW+B,KAAMwC,aAKjC,cAAC,IAAD,UACI,cAAC,IAAD,CAAKvE,UAAU,gBAAf,SAAgCpC,EAAM0G,UAAUG,mBAGxD,cAAC,IAAD,CAAKzE,UAAU,WAAf,SACK0B,GACG,cAAC,IAAD,UACI,cAAC,IAAD,CAAoBL,YApCrB,SAAD,mCAoCE,+BAWhC,SAASY,EAAQrE,GACb,IAAMsE,EAAQ,IAAIL,KAElB,EAAwChE,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,mBAAS,CACjC2G,aAAc,GACdC,YAAa,GACbC,YAAaxC,EAAMI,WAAa,EAChCqC,WAAYzC,EAAMM,gBAJtB,mBAAO5B,EAAP,KAAeC,EAAf,KAJoB,SAWL8B,EAXK,8EAWpB,WAA4BxE,GAA5B,SAAAC,EAAA,sDACIyC,GAAU,SAAAG,GACN,OAAO,2BACAA,GADP,kBAEK7C,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,WAJtC,4CAXoB,kEAoBpB,WAA4BJ,GAA5B,qBAAAC,EAAA,6DACID,EAAEK,iBADN,SAGc+F,EAAa,IAAI1C,KAAKjB,EAAO+D,WAAY/D,EAAO8D,YAAY,GAE5DE,EAAe,CACjBJ,aAAc5D,EAAO4D,aACrBC,YAAa7D,EAAO6D,YACpBF,WAAYA,GARxB,SAW+B9F,MAAM,cAAD,OAAeb,EAAMc,KAAKC,SAA1B,eAAiD,CACzEC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACT,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BlB,EAAMmB,QAAQC,YAEzCC,KAAMC,KAAKC,UAAUyF,KAlBjC,cAWcxF,EAXd,gBAqByBA,EAASC,OArBlC,UAqBYC,EArBZ,OAsBaF,EAASG,GAtBtB,uBAuBkB,IAAIC,MAAMF,EAAKG,SAvBjC,QA0BY7B,EAAMiH,iBACNjH,EAAMiH,gBAAgBD,GA3BlC,kDA8BQjF,QAAQC,MAAR,2DAAkEhC,EAAMc,KAAKC,SAA7E,oBACAZ,EAAgB,KAAI0B,SA/B5B,2DApBoB,sBAuDpB,OACI,eAAC,IAAD,CAAMM,aAxDU,4CAwDhB,UACMa,EAAO9C,cACL,cAAC,IAAD,CAASkC,UAAU,yBAAnB,SACI,qBAAKA,UAAU,qBAAqBC,KAAK,QAAzC,SAAkDnC,MAG1D,eAAC,IAAD,WACI,cAAC,IAAD,CAAWgF,IAAI,kBAAkB9C,UAAU,WAA3C,2BACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,uBAAOE,GAAG,kBAAkB5B,KAAK,eAAe6B,KAAK,OACjDH,UAAU,eAAezB,MAAOqC,EAAO4D,aAAcpE,SAAUuC,EAC3DrC,YAAY,0BAI5B,eAAC,IAAD,WACI,cAAC,IAAD,CAAWwC,IAAI,kBAAkB9C,UAAU,WAA3C,0BACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,uBAAOE,GAAG,kBAAkB5B,KAAK,cAAc6B,KAAK,OAChDH,UAAU,eAAezB,MAAOqC,EAAO6D,YAAarE,SAAUuC,EAC1DrC,YAAY,sBAI5B,eAAC,IAAD,WACI,cAAC,IAAD,CAAYwC,IAAI,kBAAkB9C,UAAU,WAA5C,yBACA,cAAC,IAAD,CAAWA,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,kBACHF,UAAU,eACV1B,KAAK,cACLyE,MAAM,eACNE,WAAW,EACX1E,MAAOqC,EAAO8D,YACd/B,aAAcA,EACdK,UAAU,MAGd,cAAC,IAAD,CAAWhD,UAAU,WAArB,SACI,cAAC,IAAD,CACAE,GAAG,kBACHF,UAAU,eACV1B,KAAK,aACLyE,MAAM,cACNG,UAAWhB,EAAMM,cAAc,IAC/BW,QAASjB,EAAMM,cACfjE,MAAOqC,EAAO+D,WACdhC,aAAcA,EACdK,UAAU,SAIlB,cAAC,IAAD,CAAShD,UAAU,yBAAnB,SACI,cAAC,IAAD,CAAYA,UAAU,oBAAtB,sBAOD,SAAS8E,EAAgBlH,GACpC,MAAgCC,oBAAS,GAAzC,mBAAO2C,EAAP,KAAiBC,EAAjB,KACA,EAAkC5C,oBAAS,GAA3C,mBAAO6C,EAAP,KAAkBC,EAAlB,KACA,EAAoC9C,mBAAS,IAA7C,mBAAOkH,EAAP,KAAmBC,EAAnB,KAH2C,SAmC5BlE,EAnC4B,8EAmC3C,WAA8B3C,GAA9B,SAAAC,EAAA,sDACID,EAAEK,iBACFiC,GAAaD,GAFjB,4CAnC2C,kEAwC3C,WAA+BoE,GAA/B,SAAAxG,EAAA,sDACI4G,GAAc,SAAAC,GACV,MAAM,GAAN,mBAAYA,GAAZ,CAA4BL,OAEhCnE,GAAY,GAJhB,4CAxC2C,sBA+C3C,OA1CAZ,qBAAU,WAAM,4CACZ,8BAAAzB,EAAA,sEAEQuC,GAAa,GAFrB,SAG+BlC,MAAM,cAAD,OAAeb,EAAMc,KAAKC,SAA1B,eAAiD,CACzEC,OAAQ,MACRC,YAAa,cACbC,QAAS,CACT,cAAgB,UAAhB,OAA2BlB,EAAMmB,QAAQC,cAPrD,cAGcI,EAHd,gBAWyBA,EAASC,OAXlC,UAWYC,EAXZ,OAYaF,EAASG,GAZtB,uBAakB,IAAIC,MAAMF,EAAKG,SAbjC,QAgBQuF,GAAc,SAAAC,GACV,MAAM,GAAN,mBAAYA,GAAZ,YAA+B3F,OAjB3C,kDAoBQK,QAAQC,MAAR,wDAA+DhC,EAAMc,KAAKC,SAA1E,oBApBR,yBAsBQgC,GAAa,GAtBrB,8EADY,uBAAC,WAAD,wBA2BZM,KACD,CAACrD,EAAMc,KAAMd,EAAMmB,UAelB,eAAC,IAAD,WACI,cAAC,IAAD,CAAUmC,MAAM,YAAhB,UACMtD,EAAMuD,cAECX,EACD,cAAC,IAAD,CAAalC,KAAK,SAAS8C,KAAK,QAAQC,YAAaP,IACrD,cAAC,IAAD,CAAaxC,KAAK,MAAM8C,KAAK,MAAMC,YAAaP,OAI3DN,GACG,cAAC,IAAD,UACI,cAAC,EAAD,CACIzB,QAASnB,EAAMmB,QACfL,KAAMd,EAAMc,KACZmG,gBA/DuB,gDAmEnC,cAAC,IAAD,UAESnE,EACD,cAAC,IAAD,CAAQA,WAAW,IACnB,cAAC,IAAD,UAC4B,IAAtBqE,EAAW3C,OACT,mCACK2C,EAAWvB,KAAI,SAACc,EAAWb,GAAZ,OACZ,cAACY,EAAD,CAEItF,QAASnB,EAAMmB,QACfuF,UAAWA,GAFNb,QAMjB,cAACW,EAAD,WCrQb,SAASc,EAAatH,GACjC,IAAMuH,IAA0BvH,EAAMmB,QAAQqG,YAE9C,OACI,qCACI,cAAC7E,EAAD,CACIxB,QAASnB,EAAMmB,QACfL,KAAMd,EAAMc,KACZyC,YAAavD,EAAMuD,cAErBgE,GACE,qCACI,cAAC/B,EAAD,CACIrE,QAASnB,EAAMmB,QACfL,KAAMd,EAAMc,KACZyC,YAAavD,EAAMuD,cAEvB,cAAC6C,EAAD,CACIjF,QAASnB,EAAMmB,QACfL,KAAMd,EAAMc,KACZyC,YAAavD,EAAMuD,iBAI/B,cAAC2D,EAAD,CACI/F,QAASnB,EAAMmB,QACfL,KAAMd,EAAMc,KACZyC,YAAavD,EAAMuD,mB,0FC/BpB,SAASkE,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE","file":"static/js/21.3b82438d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FluidContainer } from '../../../../../../components/layout';\nimport { TitleBar, TitleButton, Widget, WidgetBody } from '../../../../../../components/widgets';\nimport { Form, FormGroup, FormRow, FormSubmit } from '../../../../../../components/form.js';\nimport { Loader } from '../../../../../../components/loaders';\n\n\nfunction EditForm(props) {\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [state, setState] = useState({\n        description: \"\"\n    });\n\n    useEffect(() => {\n        setState(prevState => {\n            return {\n                ...prevState,\n                description: props.description\n            }\n        });\n    }, [props.description]);\n\n    async function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        });\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        try {\n            const response = await fetch(`/api/users/${props.user.username}`, {\n                method: 'PUT',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${props.session.authToken}`\n                },\n                body: JSON.stringify({\n                    description: state.description\n                })\n            });\n\n            let data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message);\n            }\n\n            if (props.updateState) {\n                props.updateState({\n                    description: state.description\n                });\n            }\n        } catch (err) {\n            console.error(`Failed to update about information for user- ${props.user.username}. ${err}`);\n            setErrorMessage(err.message);\n        }\n    }\n\n    return (\n        <FluidContainer>\n            <Form handleSubmit={handleSubmit}>\n                {errorMessage &&\n                    <FormRow className=\"justify-content-center\">\n                        <div className=\"alert alert-danger\" role=\"alert\">{errorMessage}</div>\n                    </FormRow>\n                }\n                <FormGroup>\n                    <textarea id=\"descriptionInput01\" type=\"text\" name=\"description\"\n                        className=\"form-control\"  value={state.description} onChange={handleChange} \n                            rows=\"3\" placeholder=\"Say something about yourself.\">\n                    </textarea>\n                </FormGroup>\n                <FormRow className=\"justify-content-center\">\n                    <FormSubmit className=\"col-auto col-md-4\">Save</FormSubmit>\n                </FormRow>\n            </Form>\n        </FluidContainer>\n    );\n}\n\n\nexport default function AboutWidget(props) {\n    const [editMode, setEditMode] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [fields, setFields] = useState({\n        description: \"\"\n    });\n\n    useEffect(() => {\n        async function initialize() {\n            try {\n                setIsLoading(true);\n                const response = await fetch(`/api/users/${props.user.username}`, {\n                    method: 'GET',\n                    credentials: 'same-origin',\n                    headers: {\n                    'Authorization': `Bearer ${props.session.authToken}`\n                    }\n                });\n\n                let data = await response.json();\n                if (!response.ok) {\n                    throw new Error(data.message);\n                }\n\n                setFields(prevFields => {\n                    return {\n                        ...prevFields,\n                        description: data.description\n                    }\n                });\n            } catch (err) {\n                console.error(`Failed to get about information for user- ${props.user.username}. ${err}`);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        initialize();\n    }, [props.user, props.session]);\n\n    async function toggleEditMode(e) {\n        e.preventDefault();\n        setEditMode(!editMode);\n    }\n\n    async function updateFields(newFields) {\n        setFields(prevFields => {\n            return { \n                ...prevFields, \n                ...newFields\n            }\n        });\n        setEditMode(!editMode);\n    }\n\n    return (\n        <Widget>\n            <TitleBar title=\"About me\">\n                {!props.disableEdit &&\n                    (\n                        (editMode) ?\n                        <TitleButton name=\"Cancel\" icon=\"clear\" handleClick={toggleEditMode} /> :\n                        <TitleButton name=\"Edit\" icon=\"edit\" handleClick={toggleEditMode} />\n                    )\n                }\n            </TitleBar>\n            <WidgetBody>\n                {\n                    (editMode) ?\n                    <>\n                        <EditForm\n                            session={props.session}\n                            user={props.user}\n                            description={fields.description}\n                            updateState={updateFields}\n                        />\n                    </> :\n                    <>\n                        {\n                            (isLoading) ?\n                            <Loader isLoading={true} /> :\n                            <p className=\"my-0\">{fields.description}</p>\n                        }\n                    </>\n                }\n            </WidgetBody>\n        </Widget>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { MonthDate, SelectMonthByName, SelectYear } from '../../../../../../components/dates';\nimport { Form, FormGroup, FormLabel, FormLegend, FormRow, \n    FormSubmit } from '../../../../../../components/form';\nimport { Col, FluidContainer, Row } from '../../../../../../components/layout';\nimport { Loader } from '../../../../../../components/loaders';\nimport { QualificationInput, Qualifications, Username } from '../../../../../../components/users';\nimport { TitleBar, TitleButton, Widget, WidgetBody, WidgetDropdown, WidgetDropdownItem, \n    WidgetList, WidgetListItem } from '../../../../../../components/widgets';\n\n\nfunction DefaultDegreeItem(props) {\n    return (\n        <WidgetListItem>\n            <FluidContainer>\n                <Row>\n                    <Col className=\"md-font-sm text-center text-muted\">No education available</Col>\n                </Row>\n            </FluidContainer>\n        </WidgetListItem>\n    );\n}\n\n\nfunction DegreeItem(props) {\n    async function handleDelete(e) {\n        e.preventDefault();\n        if (props.handleDelete) {\n            props.handleDelete(props.degree.id);\n        }\n    }\n\n    const username = props.degree.username;\n    const currentUsername = Username({ user: props.session });\n    const fromCurrentUser = (currentUsername === username) ? true : false;\n\n    const fromDate = new Date(props.degree.fromDate);\n    const toDate = new Date(props.degree.toDate);\n\n    return (\n        <WidgetListItem>\n            <FluidContainer className=\"px-0\">\n                <Row>\n                    <Col>\n                        <Row>\n                            <Col className=\"align-self-center\">\n                                <Row>\n                                    <Col className=\"text-truncate font-weight-bold\">{props.degree.degree}</Col>\n                                    <Col className=\"col-auto\">\n                                        <MonthDate date={fromDate} /> - <MonthDate date={toDate} />\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"text-truncate\">{props.degree.university}</Col>\n                        </Row>\n                    </Col>\n                    <Col className=\"col-auto\">\n                        {fromCurrentUser &&\n                            <WidgetDropdown>\n                                <WidgetDropdownItem handleClick={handleDelete}>Delete</WidgetDropdownItem>\n                            </WidgetDropdown>\n                        }\n                    </Col>\n                </Row>\n            </FluidContainer>\n        </WidgetListItem>\n    );\n}\n\n\nfunction AddForm(props) {\n    const today = new Date();\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [fields, setFields] = useState({\n        degree: (Qualifications.length) ? Qualifications[0]: \"\",\n        fromMonth: today.getMonth() + 1,\n        fromYear: today.getFullYear(),\n        toMonth: today.getMonth() + 1,\n        toYear: today.getFullYear(),\n        university: \"\"\n    });\n\n    async function handleChange(e) {\n        setFields(prevFields => {\n            return {\n                ...prevFields,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        try {\n            const fromDate = new Date(fields.fromYear, fields.fromMonth-1);\n            const toDate = new Date(fields.toYear, fields.toMonth-1);\n\n            const newDegree = {\n                degree: fields.degree,\n                fromDate: fromDate,\n                toDate: toDate,\n                university: fields.university,\n            };\n\n            const response = await fetch(`/api/users/${props.user.username}/degrees`, {\n                method: 'POST',\n                credentials: 'same-origin',\n                headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${props.session.authToken}`\n                },\n                body: JSON.stringify(newDegree)\n            });\n\n            let data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message);\n            }\n\n            if (props.appendDegree) {\n                props.appendDegree(newDegree);\n            }\n        } catch (err) {\n            console.error(`Failed to update education information for user- ${props.user.username}. ${err}`);\n            setErrorMessage(err.message);\n        }\n    }\n\n    return (\n        <Form handleSubmit={handleSubmit}>\n            {(fields.errorMessage) &&\n                <FormRow className=\"justify-content-center\">\n                    <div className=\"alert alert-danger\" role=\"alert\">{errorMessage}</div>\n                </FormRow>\n            }\n            <FormRow>\n                <FormLabel for=\"educationForm01\" className=\"col-sm-4\">Qualification</FormLabel>\n                <FormGroup className=\"col-sm-8\">\n                    <QualificationInput\n                        id=\"educationForm01\"\n                        className=\"form-control\"\n                        name=\"degree\"\n                        label=\"Degree\"\n                        value={fields.degree}\n                        handleChange={handleChange}\n                        required={true}\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow>\n                <FormLegend for=\"educationForm02\" className=\"col-sm-4\">From Date</FormLegend>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectMonthByName\n                    id=\"educationForm02\"\n                    className=\"form-control\"\n                    name=\"fromMonth\"\n                    label=\"From Month\"\n                    shortForm={true}\n                    value={fields.fromMonth}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectYear\n                    id=\"educationForm03\"\n                    className=\"form-control\"\n                    name=\"fromYear\"\n                    label=\"From Year\"\n                    startYear={today.getFullYear()-100}\n                    endYear={today.getFullYear()}\n                    value={fields.fromYear}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow>\n                <FormLegend for=\"educationForm04\" className=\"col-sm-4\">To Date</FormLegend>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectMonthByName\n                    id=\"educationForm04\"\n                    className=\"form-control\"\n                    name=\"toMonth\"\n                    label=\"To Month\"\n                    shortForm={true}\n                    value={fields.toMonth}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectYear\n                    id=\"educationForm05\"\n                    className=\"form-control\"\n                    name=\"toYear\"\n                    label=\"To Year\"\n                    startYear={today.getFullYear()-100}\n                    endYear={today.getFullYear()}\n                    value={fields.toYear}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow>\n                <FormLabel for=\"educationForm06\" className=\"col-sm-4\">University</FormLabel>\n                <FormGroup className=\"col-sm-8\">\n                    <input id=\"educationForm06\" name=\"university\" type=\"text\" \n                        className=\"form-control\" value={fields.university} onChange={handleChange} \n                            placeholder=\"Name of University\"\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow className=\"justify-content-center\">\n                <FormSubmit className=\"col-auto col-md-4\">Add</FormSubmit>\n            </FormRow>\n        </Form>\n    );\n}\n\n\nexport default function EducationWidget(props) {\n    const [editMode, setEditMode] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [degrees, setDegrees] = useState([]);\n\n    useEffect(() => {\n        async function initialize() {\n            try {\n                setIsLoading(true);\n                const response = await fetch(`/api/users/${props.user.username}/degrees`, {\n                    method: 'GET',\n                    credentials: 'same-origin',\n                    headers: {\n                    'Authorization': `Bearer ${props.session.authToken}`\n                    }\n                });\n\n                let data = await response.json();\n                if (!response.ok) {\n                    throw new Error(data.message);\n                }\n\n                setDegrees(prevDegrees => {\n                    return [ ...prevDegrees, ...data ];\n                });\n            } catch (err) {\n                console.error(`Failed to get education information for user- ${props.user.username}. ${err}`);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        initialize();\n    }, [props.user, props.session]);\n\n    async function toggleEditMode(e) {\n        e.preventDefault();\n        setEditMode(!editMode);\n    }\n\n    async function appendDegree(newDegree) {\n        setDegrees(prevDegrees => {\n            return [ ...prevDegrees, newDegree ];\n        });\n        setEditMode(false);\n    }\n\n    return (\n        <Widget>\n            <TitleBar title=\"Education\">\n                {!props.disableEdit &&\n                    (\n                        (editMode) ?\n                        <TitleButton name=\"Cancel\" icon=\"clear\" handleClick={toggleEditMode} /> :\n                        <TitleButton name=\"Add\" icon=\"add\" handleClick={toggleEditMode} />\n                    )\n                }\n            </TitleBar>\n            {editMode &&\n                <WidgetBody>\n                    <AddForm\n                        session={props.session}\n                        user={props.user}\n                        appendDegree={appendDegree}\n                    />\n                </WidgetBody>\n            }\n            <WidgetBody>\n                {\n                    (isLoading) ?\n                    <Loader isLoading={true} /> :\n                    <WidgetList>\n                        {(degrees.length !== 0) ?\n                            <>\n                                {degrees.map((degree, index) => (\n                                    <DegreeItem \n                                        key={index}\n                                        session={props.session}\n                                        degree={degree}\n                                    />\n                                ))}\n                            </> :\n                            <DefaultDegreeItem />\n                        }\n                    </WidgetList>\n                }\n            </WidgetBody>\n        </Widget>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { MonthDate, SelectMonthByName, SelectYear } from '../../../../../../components/dates';\nimport { Form, FormGroup, FormLabel, FormLegend, FormRow, \n    FormSubmit } from '../../../../../../components/form';\nimport { Col, FluidContainer, Row } from '../../../../../../components/layout';\nimport { Loader } from '../../../../../../components/loaders';\nimport { Username } from '../../../../../../components/users';\nimport { TitleBar, TitleButton, Widget, WidgetBody, WidgetDropdown, WidgetDropdownItem, \n    WidgetList, WidgetListItem } from '../../../../../../components/widgets';\n\n\nfunction DefaultJobItem(props) {\n    return (\n        <WidgetListItem>\n            <FluidContainer>\n                <Row>\n                    <Col className=\"md-font-sm text-center text-muted\">No experience available</Col>\n                </Row>\n            </FluidContainer>\n        </WidgetListItem>\n    );\n}\n\n\nfunction JobItem(props) {\n    async function handleDelete(e) {\n        e.preventDefault();\n        if (props.handleDelete) {\n            props.handleDelete(props.job.id);\n        }\n    }\n\n    const username = props.job.username;\n    const currentUsername = Username({ user: props.session });\n    const fromCurrentUser = (currentUsername === username) ? true : false;\n\n    const fromDate = new Date(props.job.fromDate);\n    const toDate = new Date(props.job.toDate);\n\n    return (\n        <WidgetListItem>\n            <FluidContainer className=\"px-0\">\n                <Row>\n                    <Col>\n                        <Row>\n                            <Col className=\"align-self-center\">\n                                <Row>\n                                    <Col className=\"text-truncate font-weight-bold\">{props.job.title}</Col>\n                                    <Col className=\"col-auto\">\n                                        <MonthDate date={fromDate} /> - <MonthDate date={toDate} />\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"text-truncate\">{props.job.company}</Col>\n                        </Row>\n                    </Col>\n                    <Col className=\"col-auto\">\n                        {fromCurrentUser &&\n                            <WidgetDropdown>\n                                <WidgetDropdownItem handleClick={handleDelete}>Delete</WidgetDropdownItem>\n                            </WidgetDropdown>\n                        }\n                    </Col>\n                </Row>\n            </FluidContainer>\n        </WidgetListItem>\n    );\n}\n\n\nfunction AddForm(props) {\n    const today = new Date();\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [fields, setFields] = useState({\n        title: \"\",\n        fromMonth: today.getMonth() + 1,\n        fromYear: today.getFullYear(),\n        toMonth: today.getMonth() + 1,\n        toYear: today.getFullYear(),\n        company: \"\"\n    });\n\n    async function handleChange(e) {\n        setFields(prevFields => {\n            return {\n                ...prevFields,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        try {\n            const fromDate = new Date(fields.fromYear, fields.fromMonth-1);\n            const toDate = new Date(fields.toYear, fields.toMonth-1);\n\n            const newJob = {\n                title: fields.title,\n                fromDate: fromDate,\n                toDate: toDate,\n                company: fields.company,\n            };\n\n            const response = await fetch(`/api/users/${props.user.username}/jobs`, {\n                method: 'POST',\n                credentials: 'same-origin',\n                headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${props.session.authToken}`\n                },\n                body: JSON.stringify(newJob)\n            });\n\n            let data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message);\n            }\n\n            if (props.appendJob) {\n                props.appendJob(newJob);\n            }\n        } catch (err) {\n            console.error(`Failed to update experience information for user- ${props.user.username}. ${err}`);\n            setErrorMessage(err.message);\n        }\n    }\n\n    return (\n        <Form handleSubmit={handleSubmit}>\n            {(fields.errorMessage) &&\n                <FormRow className=\"justify-content-center\">\n                    <div className=\"alert alert-danger\" role=\"alert\">{errorMessage}</div>\n                </FormRow>\n            }\n            <FormRow>\n                <FormLabel for=\"experienceForm01\" className=\"col-sm-4\">Title</FormLabel>\n                <FormGroup className=\"col-sm-8\">\n                    <input id=\"experienceForm01\" name=\"title\" type=\"text\" className=\"form-control\"\n                        value={fields.title} onChange={handleChange} placeholder=\"Title\"\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow>\n                <FormLegend for=\"experienceForm02\" className=\"col-sm-4\">From Date</FormLegend>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectMonthByName\n                    id=\"experienceForm02\"\n                    className=\"form-control\"\n                    name=\"fromMonth\"\n                    label=\"From Month\"\n                    shortForm={true}\n                    value={fields.fromMonth}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectYear\n                    id=\"experienceForm03\"\n                    className=\"form-control\"\n                    name=\"fromYear\"\n                    label=\"From Year\"\n                    startYear={today.getFullYear()-100}\n                    endYear={today.getFullYear()}\n                    value={fields.fromYear}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow>\n                <FormLegend for=\"experienceForm04\" className=\"col-sm-4\">To Date</FormLegend>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectMonthByName\n                    id=\"experienceForm04\"\n                    className=\"form-control\"\n                    name=\"toMonth\"\n                    label=\"To Month\"\n                    shortForm={true}\n                    value={fields.toMonth}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectYear\n                    id=\"experienceForm05\"\n                    className=\"form-control\"\n                    name=\"toYear\"\n                    label=\"To Year\"\n                    startYear={today.getFullYear()-100}\n                    endYear={today.getFullYear()}\n                    value={fields.toYear}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow>\n                <FormLabel for=\"experienceForm06\" className=\"col-sm-4\">Company</FormLabel>\n                <FormGroup className=\"col-sm-8\">\n                    <input id=\"experienceForm06\" name=\"company\" type=\"text\" \n                        className=\"form-control\" value={fields.company} onChange={handleChange} \n                            placeholder=\"Name of Company\"\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow className=\"justify-content-center\">\n                <FormSubmit className=\"col-auto col-md-4\">Add</FormSubmit>\n            </FormRow>\n        </Form>\n    );\n}\n\n\nexport default function ExperienceWidget(props) {\n    const [editMode, setEditMode] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [jobs, setJobs] = useState([]);\n\n    useEffect(() => {\n        async function initialize() {\n            try {\n                setIsLoading(true);\n                const response = await fetch(`/api/users/${props.user.username}/jobs`, {\n                    method: 'GET',\n                    credentials: 'same-origin',\n                    headers: {\n                    'Authorization': `Bearer ${props.session.authToken}`\n                    }\n                });\n\n                let data = await response.json();\n                if (!response.ok) {\n                    throw new Error(data.message);\n                }\n\n                setJobs(prevJobs => {\n                    return [ ...prevJobs, ...data ];\n                });\n            } catch (err) {\n                console.error(`Failed to get experience information for user- ${props.user.username}. ${err}`);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        initialize();\n    }, [props.user, props.session]);\n\n    async function toggleEditMode(e) {\n        e.preventDefault();\n        setEditMode(!editMode);\n    }\n\n    async function appendJob(newJob) {\n        setJobs(prevJobs => {\n            return [ ...prevJobs, newJob ];\n        });\n        setEditMode(false);\n    }\n\n    return (\n        <Widget>\n            <TitleBar title=\"Experience\">\n                {!props.disableEdit &&\n                    (\n                        (editMode) ?\n                        <TitleButton name=\"Cancel\" icon=\"clear\" handleClick={toggleEditMode} /> :\n                        <TitleButton name=\"Add\" icon=\"add\" handleClick={toggleEditMode} />\n                    )\n                }\n            </TitleBar>\n            {editMode &&\n                <WidgetBody>\n                    <AddForm\n                        session={props.session}\n                        user={props.user}\n                        appendJob={appendJob}\n                    />\n                </WidgetBody>\n            }\n            <WidgetBody>\n                {\n                    (isLoading) ?\n                    <Loader isLoading={true} /> :\n                    <WidgetList>\n                        {(jobs.length !== 0) ?\n                            <>\n                                {jobs.map((job, index) => (\n                                    <JobItem \n                                        key={index}\n                                        session={props.session}\n                                        job={job}\n                                    />\n                                ))}\n                            </> :\n                            <DefaultJobItem />\n                        }\n                    </WidgetList>\n                }\n            </WidgetBody>\n        </Widget>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { MonthDate, SelectMonthByName, SelectYear } from '../../../../../../components/dates';\nimport { Form, FormGroup, FormLabel, FormLegend, FormRow, \n    FormSubmit } from '../../../../../../components/form';\nimport { Col, FluidContainer, Row } from '../../../../../../components/layout';\nimport { Loader } from '../../../../../../components/loaders';\nimport { Username } from '../../../../../../components/users';\nimport { TitleBar, TitleButton, Widget, WidgetBody, WidgetDropdown, WidgetDropdownItem, \n    WidgetList, WidgetListItem } from '../../../../../../components/widgets';\n\n\nfunction DefaultInsuranceItem(props) {\n    return (\n        <WidgetListItem>\n            <FluidContainer>\n                <Row>\n                    <Col className=\"md-font-sm text-center text-muted\">No insurance available</Col>\n                </Row>\n            </FluidContainer>\n        </WidgetListItem>\n    );\n}\n\n\nfunction InsuranceItem(props) {\n    async function handleDelete(e) {\n        e.preventDefault();\n        if (props.handleDelete) {\n            props.handleDelete(props.insurance.id);\n        }\n    }\n\n    const username = props.insurance.username;\n    const currentUsername = Username({ user: props.session });\n    const fromCurrentUser = (currentUsername === username) ? true : false;\n\n    const expiryDate = new Date(props.insurance.expiryDate);\n\n    return (\n        <WidgetListItem>\n            <FluidContainer className=\"px-0\">\n                <Row>\n                    <Col>\n                        <Row>\n                            <Col className=\"align-self-center\">\n                                <Row>\n                                    <Col className=\"text-truncate font-weight-bold\">{props.insurance.providerName}</Col>\n                                    <Col className=\"col-auto\">\n                                        <MonthDate date={expiryDate} />\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"text-truncate\">{props.insurance.insuranceId}</Col>\n                        </Row>\n                    </Col>\n                    <Col className=\"col-auto\">\n                        {fromCurrentUser &&\n                            <WidgetDropdown>\n                                <WidgetDropdownItem handleClick={handleDelete}>Delete</WidgetDropdownItem>\n                            </WidgetDropdown>\n                        }\n                    </Col>\n                </Row>\n            </FluidContainer>\n        </WidgetListItem>\n    );\n}\n\n\nfunction AddForm(props) {\n    const today = new Date();\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [fields, setFields] = useState({\n        providerName: \"\",\n        insuranceId: \"\",\n        expiryMonth: today.getMonth() + 1,\n        expiryYear: today.getFullYear()\n    });\n\n    async function handleChange(e) {\n        setFields(prevFields => {\n            return {\n                ...prevFields,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        try {\n            const expiryDate = new Date(fields.expiryYear, fields.expiryMonth-1);\n\n            const newInsurance = {\n                providerName: fields.providerName,\n                insuranceId: fields.insuranceId,\n                expiryDate: expiryDate\n            };\n\n            const response = await fetch(`/api/users/${props.user.username}/insurances`, {\n                method: 'POST',\n                credentials: 'same-origin',\n                headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${props.session.authToken}`\n                },\n                body: JSON.stringify(newInsurance)\n            });\n\n            let data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message);\n            }\n\n            if (props.appendInsurance) {\n                props.appendInsurance(newInsurance);\n            }\n        } catch (err) {\n            console.error(`Failed to update insurance information for user- ${props.user.username}. ${err}`);\n            setErrorMessage(err.message);\n        }\n    }\n\n    return (\n        <Form handleSubmit={handleSubmit}>\n            {(fields.errorMessage) &&\n                <FormRow className=\"justify-content-center\">\n                    <div className=\"alert alert-danger\" role=\"alert\">{errorMessage}</div>\n                </FormRow>\n            }\n            <FormRow>\n                <FormLabel for=\"insuranceForm01\" className=\"col-sm-4\">Provider Name</FormLabel>\n                <FormGroup className=\"col-sm-8\">\n                    <input id=\"insuranceForm01\" name=\"providerName\" type=\"text\" \n                        className=\"form-control\" value={fields.providerName} onChange={handleChange} \n                            placeholder=\"Name of Provider\"\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow>\n                <FormLabel for=\"insuranceForm02\" className=\"col-sm-4\">Insurance ID</FormLabel>\n                <FormGroup className=\"col-sm-8\">\n                    <input id=\"insuranceForm02\" name=\"insuranceId\" type=\"text\"\n                        className=\"form-control\" value={fields.insuranceId} onChange={handleChange}\n                            placeholder=\"Insurance ID\" \n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow>\n                <FormLegend for=\"insuranceForm03\" className=\"col-sm-4\">Expiry Date</FormLegend>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectMonthByName\n                    id=\"insuranceForm03\"\n                    className=\"form-control\"\n                    name=\"expiryMonth\"\n                    label=\"Expiry Month\"\n                    shortForm={true}\n                    value={fields.expiryMonth}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n                <FormGroup className=\"col-sm-4\">\n                    <SelectYear\n                    id=\"insuranceForm04\"\n                    className=\"form-control\"\n                    name=\"expiryYear\"\n                    label=\"Expiry Year\"\n                    startYear={today.getFullYear()-100}\n                    endYear={today.getFullYear()}\n                    value={fields.expiryYear}\n                    handleChange={handleChange}\n                    required={true}\n                    />\n                </FormGroup>\n            </FormRow>\n            <FormRow className=\"justify-content-center\">\n                <FormSubmit className=\"col-auto col-md-4\">Add</FormSubmit>\n            </FormRow>\n        </Form>\n    );\n}\n\n\nexport default function InsuranceWidget(props) {\n    const [editMode, setEditMode] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [insurances, setInsurances] = useState([]);\n\n    useEffect(() => {\n        async function initialize() {\n            try {\n                setIsLoading(true);\n                const response = await fetch(`/api/users/${props.user.username}/insurances`, {\n                    method: 'GET',\n                    credentials: 'same-origin',\n                    headers: {\n                    'Authorization': `Bearer ${props.session.authToken}`\n                    }\n                });\n\n                let data = await response.json();\n                if (!response.ok) {\n                    throw new Error(data.message);\n                }\n\n                setInsurances(prevInsurances => {\n                    return [ ...prevInsurances, ...data ];\n                });\n            } catch (err) {\n                console.error(`Failed to get insurance information for user- ${props.user.username}. ${err}`);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        initialize();\n    }, [props.user, props.session]);\n\n    async function toggleEditMode(e) {\n        e.preventDefault();\n        setEditMode(!editMode);\n    }\n\n    async function appendInsurance(newInsurance) {\n        setInsurances(prevInsurances => {\n            return [ ...prevInsurances, newInsurance ];\n        });\n        setEditMode(false);\n    }\n\n    return (\n        <Widget>\n            <TitleBar title=\"Insurance\">\n                {!props.disableEdit &&\n                    (\n                        (editMode) ?\n                        <TitleButton name=\"Cancel\" icon=\"clear\" handleClick={toggleEditMode} /> :\n                        <TitleButton name=\"Add\" icon=\"add\" handleClick={toggleEditMode} />\n                    )\n                }\n            </TitleBar>\n            {editMode &&\n                <WidgetBody>\n                    <AddForm\n                        session={props.session}\n                        user={props.user}\n                        appendInsurance={appendInsurance}\n                    />\n                </WidgetBody>\n            }\n            <WidgetBody>\n                {\n                    (isLoading) ?\n                    <Loader isLoading={true} /> :\n                    <WidgetList>\n                        {(insurances.length !== 0) ?\n                            <>\n                                {insurances.map((insurance, index) => (\n                                    <InsuranceItem \n                                        key={index}\n                                        session={props.session}\n                                        insurance={insurance}\n                                    />\n                                ))}\n                            </> :\n                            <DefaultInsuranceItem />\n                        }\n                    </WidgetList>\n                }\n            </WidgetBody>\n        </Widget>\n    );\n}","import React from 'react';\n\nimport AboutWidget from './about';\nimport EducationWidget from './education';\nimport ExperienceWidget from './experience';\nimport InsuranceWidget from './insurance';\n\n\nexport default function AboutSection(props) {\n    const isCurrentUserPhysician = (props.session.isPhysician) ? true: false;\n\n    return (\n        <>\n            <AboutWidget\n                session={props.session}\n                user={props.user}\n                disableEdit={props.disableEdit}\n            />\n            {(isCurrentUserPhysician) &&\n                <>\n                    <EducationWidget\n                        session={props.session}\n                        user={props.user}\n                        disableEdit={props.disableEdit}\n                    />\n                    <ExperienceWidget \n                        session={props.session}\n                        user={props.user}\n                        disableEdit={props.disableEdit}\n                    />\n                </>\n            }\n            <InsuranceWidget \n                session={props.session}\n                user={props.user}\n                disableEdit={props.disableEdit}\n            />\n        </>\n    );\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}