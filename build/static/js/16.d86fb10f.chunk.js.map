{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","containers/users/lists.js","containers/users/views/searchPhysicians.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","DefaultItems","props","className","message","ListView","userItems","users","length","entries","index","user","userItem","session","username","listView","push","defaultMessage","InfiniteUserList","useSelector","s","getUsers","useCallback","a","view","search","page","limit","searchParams","URLSearchParams","append","fetch","toString","headers","authToken","response","json","ok","Error","useState","state","setState","Math","ceil","newUsers","prevState","updatedUsers","console","error","useEffect","load","callback","SearchPhysiciansView","searchQuery","setSearchQuery","query","title","handleSearch","placeholder"],"mappings":"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","file":"static/js/16.d86fb10f.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FluidContainer, Row, Col } from '../../components/layout';\nimport { List, ListItem } from '../../components/lists';\nimport { AutoLoader } from '../../components/loaders';\n\nimport User from './user';\n\n\nfunction DefaultItems(props) {\n    return (\n        <ListItem className=\"border-0\">\n            <FluidContainer>\n                <Row className=\"justify-content-center\">\n                    <Col className=\"col-auto align-items-center\">\n                        <h6 className=\"my-0 text-muted\">\n                            {props.message}\n                        </h6>\n                    </Col>\n                </Row>\n            </FluidContainer>\n        </ListItem>\n    );\n}\n\n\nexport function ListView(props) {\n    const userItems = [];\n    if (props.users && props.users.length > 0) {\n        for (const [index, user] of props.users.entries()) {\n\n            const userItem = (\n                <ListItem key={index} className=\"px-3\">\n                    <User\n                        session={props.session}\n                        username={user.username}\n                        listView={true}\n                    />\n                </ListItem>\n            );\n            userItems.push(userItem);\n        }\n    } else {\n        userItems.push(\n            <DefaultItems message={props.defaultMessage} />\n        );\n    }\n\n    return (\n        <List className=\"md-list\">\n            {userItems}\n        </List>\n    );\n}\n\n\nexport default function InfiniteUserList(props) {\n    const session = useSelector(s => s.session);\n\n    const getUsers = useCallback(async ({view='', search='', page=0, limit=10}) => {\n        try {\n            const searchParams = new URLSearchParams();\n            searchParams.append('view', (view) ? view : '');\n            searchParams.append('search', (search) ? search : '');\n            searchParams.append('page', page);\n            searchParams.append('limit', limit);\n\n            const response = await fetch(`/api/users?${searchParams.toString()}`, {\n                headers: {\n                'Authorization': `Bearer ${session.authToken}`\n                }\n            });\n\n            const users = await response.json();\n            if (!response.ok) {\n                throw new Error(users.message);\n            }\n\n            return users;\n        } catch (err) {\n            throw(err);\n        }\n    }, [session.authToken]);\n\n    const [state, setState] = useState({\n        users: [],\n        limit: 10\n    });\n\n    // If props change, initialize users.\n    useEffect(() => {\n        async function load() {\n            try {\n                const newUsers = await getUsers({\n                    view: props.view,\n                    search: props.search,\n                    page: 0,\n                    limit: state.limit\n                });\n\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        users: newUsers\n                    }\n                });\n            } catch (err) {\n                console.error(`Failed to load users. ${err}`);\n            }\n        }\n\n        load();\n    }, [props.view, props.search, getUsers, state.limit]);\n\n    async function appendUsers() {\n        try {\n            const newUsers = await getUsers({\n                view: props.view,\n                search: props.search,\n                page: Math.ceil(state.users.length / state.limit),\n                limit: state.limit\n            });\n            \n            setState(prevState => {\n                const updatedUsers = [...prevState.users, ...newUsers];\n\n                return {\n                    ...prevState,\n                    users: updatedUsers\n                }\n            });\n        } catch (err) {\n            console.error(`Failed to append more users. ${err}`);\n        }\n    }\n\n    // Now render view\n    return (\n        <FluidContainer>\n            <Row>\n                <Col className=\"px-0\">\n                    <ListView\n                        session={session}\n                        users={state.users}\n                        defaultMessage={props.defaultMessage}\n                    />\n                    {(state.users.length > 0) &&\n                        <AutoLoader callback={appendUsers} />\n                    }\n                </Col>\n            </Row>\n        </FluidContainer>\n    );\n}","import React, { useState } from 'react';\nimport { Col, Row } from '../../../components/layout';\n\nimport TitleBar, { TitleBarSearch } from '../../home/titleBar';\nimport InfiniteUserList from '../lists';\n\n\nexport default function SearchPhysiciansView(props) {\n    const [searchQuery, setSearchQuery] = useState(\"\");\n\n    async function handleSearch(query) {\n        setSearchQuery(query);\n    }\n\n    return (\n        <>\n            <TitleBar title=\"Search Physicians\">\n                <TitleBarSearch\n                    handleSearch={handleSearch}\n                    placeholder=\"Search physicians...\"\n                />\n            </TitleBar>\n            <Row className=\"flex-grow-1\">\n                <Col>\n                    <InfiniteUserList\n                        view=\"physician\"\n                        search={searchQuery}\n                        defaultMessage=\"Search for Physicians using the search bar.\"\n                    />\n                </Col>\n            </Row>\n        </>\n    );\n}"],"sourceRoot":""}